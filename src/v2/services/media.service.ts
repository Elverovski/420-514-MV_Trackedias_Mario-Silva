import { FilmService } from "./film.service";
import { SerieService } from "./serie.service";
import { Statut } from "../enum/statut.enum";
import { validateTitre, validateDuration, validateStatuts } from "../../utils/regex";
import { logger } from "../../utils/logger";

export class MediaService {

  static async getAllMedia() {
    const films = await FilmService.getAllFilms();
    const series = await SerieService.getAllSeries();
    logger.info("üé¨ R√©cup√©ration de tous les m√©dias depuis MongoDB");
    return { films, series };
  }

  static async getMediaById(id: string) {
    const film = await FilmService.getFilmById(id);
    if (film) return { type: "film", data: film };

    const serie = await SerieService.getSerieById(id);
    if (serie) return { type: "serie", data: serie };

    logger.warn(`M√©dia non trouv√©: ${id}`);
    return null;
  }

  static async addMedia(data: any, userRole: string) {
    if (userRole !== "Admin") throw new Error("Action r√©serv√©e aux administrateurs");

    const { id, title, genre, year, rating, duration, watched, status, seasons, type } = data;

    if (!id || !validateTitre(title)) throw new Error("ID ou titre invalide");
    if (!validateDuration(duration)) throw new Error("Dur√©e invalide");

    if (type === "film") {
      const newFilm = await FilmService.createFilm({ id, title, genre, year, rating, duration, watched });
      logger.info(`Film ajout√© : ${newFilm.id}`);
      return { message: "Film ajout√©", data: newFilm };
    }

    if (type === "serie") {
      if (!status || !validateStatuts(status)) throw new Error("Statut invalide pour s√©rie");
      const newSerie = await SerieService.createSerie({ id, title, genre, year, rating, duration, status: status as Statut, seasons: seasons || [] });
      logger.info(`S√©rie ajout√©e : ${newSerie.id}`);
      return { message: "S√©rie ajout√©e", data: newSerie };
    }

    throw new Error("Type invalide, doit √™tre 'film' ou 'serie'");
  }

  static async patchMedia(id: string, data: any, userRole: string) {
    if (userRole !== "Admin") throw new Error("Action r√©serv√©e aux administrateurs");

    const { title, genre, year, rating, duration, watched, status, seasons, type } = data;

    if (title && !validateTitre(title)) throw new Error("Titre invalide");
    if (duration && !validateDuration(duration)) throw new Error("Dur√©e invalide");

    if (type === "film") {
      const updatedFilm = await FilmService.updateFilm(id, { title, genre, year, rating, duration, watched });
      if (!updatedFilm) throw new Error("Film non trouv√©");
      logger.info(`Film mis √† jour : ${id}`);
      return { message: "Film mis √† jour", data: updatedFilm };
    }

    if (type === "serie") {
      if (status && !validateStatuts(status)) throw new Error("Statut invalide");
      const updatedSerie = await SerieService.updateSerie(id, { title, genre, year, rating, duration, status, seasons });
      if (!updatedSerie) throw new Error("S√©rie non trouv√©e");
      logger.info(`S√©rie mise √† jour : ${id}`);
      return { message: "S√©rie mise √† jour", data: updatedSerie };
    }

    throw new Error("Type invalide, doit √™tre 'film' ou 'serie'");
  }
}
